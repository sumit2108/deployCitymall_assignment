{"version":3,"sources":["components/Table.js","components/Header.js","components/StaticTable.js","App.js","reportWebVitals.js","index.js"],"names":["Table","props","className","style","height","width","rowData","rows","columnDefs","columns","rowSelection","onSelectionChanged","e","setSelectedRows","api","getSelectedRows","onGridReady","params","setgridApi","Header","setLocalData","localStorage","setItem","JSON","stringify","staticData","onClick","addNewRowKey","addNewRow","id","data","length","newData","push","setData","gridApi","setRowData","applyTransaction","remove","selectedRows","selected","arr","map","item","filter","value","setSubmit","rowNodes","forEachNode","setNonEditableRows","setStaticData","nonEditableColumns","nonEditableRows","StaticTable","name","email","city","App","useEffect","getLocalData","headerName","field","sortable","editable","checkboxSelection","cellStyle","cellStyles","submit","background","cellRendererFramework","para","type","newRows","console","log","useState","getItem","localData","parse","gender","dob","country","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.ba5662eb.chunk.js","sourcesContent":["import React from \"react\";\r\nimport { AgGridReact } from \"ag-grid-react\";\r\nimport \"ag-grid-community/dist/styles/ag-grid.css\";\r\nimport \"ag-grid-community/dist/styles/ag-theme-alpine.css\";\r\nconst Table = (props) => {\r\n  let rowSelectionType = \"multiple\";\r\n\r\n  function onSelectionChange(e) {\r\n    props.setSelectedRows(e.api.getSelectedRows());\r\n   \r\n    \r\n  }\r\n  function gridReady(params) {\r\n    props.setgridApi(params.api);\r\n  }\r\n \r\n  return (\r\n    <div className=\"ag-theme-alpine\" style={{ height: 400, width: \"100%\" }}>\r\n      <AgGridReact\r\n        rowData={props.rows}\r\n        columnDefs={props.columns}\r\n        rowSelection={rowSelectionType}\r\n        onSelectionChanged={onSelectionChange}\r\n        onGridReady={gridReady}\r\n        \r\n        \r\n      />\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default Table;\r\n","import { React } from \"react\";\r\n\r\nconst Header = (props) => {\r\n\r\n\r\n\r\n  function handleAddRow() {\r\n    let addNewRowKey = props.addNewRow;\r\n    addNewRowKey.id = props.data.rows.length + 1;\r\n  \r\n\r\n    let newData = props.data.rows;\r\n    newData.push(addNewRowKey);\r\n\r\n    props.setData({ rows: newData });\r\n \r\n    props.gridApi.setRowData(props.data.rows);\r\n  }\r\n\r\n  function selectedDeleteHandler() {\r\n    props.gridApi.applyTransaction({ remove: props.selectedRows });\r\n  }\r\n\r\n  function nonSelectedDeleteHandler() {\r\n    let selected = props.selectedRows;\r\n\r\n    let arr = props.data.rows;\r\n    selected.map((item) => {\r\n      arr = arr.filter((value) => item.id !== value.id);\r\n      return item\r\n    });\r\n    props.gridApi.applyTransaction({ remove: arr });\r\n  }\r\nfunction handleSubmit(){\r\n  props.setSubmit(true)\r\n  let rowNodes=[];\r\n  props.gridApi.forEachNode((item)=>{\r\n    rowNodes.push(item.data)\r\n    props.setNonEditableRows(rowNodes)\r\n  })\r\n \r\n  props.setStaticData({columns:props.nonEditableColumns,rows:props.nonEditableRows})\r\n  props.setData({rows:props.staticData})\r\n  setLocalData()\r\n}\r\n\r\nconst setLocalData=()=>{\r\n  localStorage.setItem('data',JSON.stringify(props.staticData))\r\n};\r\n\r\n\r\n\r\n\r\n  return (\r\n    <div className=\"header\">\r\n      <button onClick={handleAddRow}>Add Row</button>\r\n      <button onClick={selectedDeleteHandler}>Delete Selected Rows</button>\r\n      <button onClick={nonSelectedDeleteHandler}>\r\n        Delete Non Selected Rows\r\n      </button>\r\n      <button onClick={handleSubmit}> Submit</button>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default Header;\r\n","import React from 'react'\r\nimport { AgGridReact } from \"ag-grid-react\";\r\nimport \"ag-grid-community/dist/styles/ag-grid.css\";\r\nimport \"ag-grid-community/dist/styles/ag-theme-alpine.css\";\r\nconst StaticTable = (props) => {\r\n    return (\r\n        <div className=\"ag-theme-alpine\" style={{ height: 400, width: \"100%\" }}>\r\n        <AgGridReact\r\n          rowData={props.rows}\r\n          columnDefs={props.columns}\r\n          />\r\n      </div>\r\n    )\r\n}\r\n\r\nexport default StaticTable\r\n","import \"./App.css\";\r\nimport Table from \"./components/Table\";\r\nimport Header from \"./components/Header\";\r\nimport { useState,useEffect } from \"react\";\r\nimport StaticTable from \"./components/StaticTable\";\r\nconst rows = [\r\n  {\r\n    id: 1,\r\n    name: \"Sumit\",\r\n    email: \"mastersumit@gmail.com\",\r\n    city: \"kanpur\",\r\n    \r\n  },\r\n  {\r\n    id: 2,\r\n    name: \"Mohit\",\r\n    email: \"mastermohit@gmail.com\",\r\n    city: \"kanpur\",\r\n    \r\n  },\r\n  {\r\n    id: 3,\r\n    name: \"Sourabh\",\r\n    email: \"mastersourabh@gmail.com\",\r\n    city: \"kanpur\",\r\n  },\r\n];\r\n\r\nfunction App() {\r\n\r\n  useEffect(() => {\r\n    getLocalData()\r\n   \r\n  }, [])\r\n\r\n  let addNewRow = {\r\n    id: \"id\",\r\n    name: \"\",\r\n    email: \"\",\r\n    gender: \"\",\r\n    dob: \"\",\r\n    country: \"\",\r\n    city: \"\",\r\n    \r\n  };\r\n\r\n\r\n\r\n  const columns = [\r\n    {\r\n      headerName: \"Id\",\r\n      field: \"id\",\r\n      sortable: true,\r\n      editable: true,\r\n      checkboxSelection: true,\r\n      cellStyle:cellStyles\r\n      \r\n    },\r\n    { headerName: \"Name\", field: \"name\", sortable: true, editable: true ,cellStyle:cellStyles\r\n  \r\n  },\r\n    { headerName: \"Email\", field: \"email\", sortable: true, editable: true, cellStyle:cellStylesYellow},\r\n    {\r\n      headerName: \"Gender\",\r\n      field: \"gender\",\r\n      editable: true,\r\n      cellRendererFramework: (para) => (\r\n        <div>\r\n          <select  name=\"gender\">\r\n            <option >Male</option>\r\n            <option >Female</option>\r\n          </select>\r\n        </div>\r\n      ),\r\n    },\r\n\r\n    {\r\n      headerName: \"DOB\",\r\n      field: \"dob\",\r\n      editable: true,\r\n\r\n      cellRendererFramework: (para) => (\r\n        <div>\r\n          <input type=\"date\" name=\"date\"  />\r\n        </div>\r\n      ),\r\n    },\r\n\r\n\r\n\r\n    { headerName: \"Country\", field: \"country\", sortable: true, editable: true ,\r\n    cellRendererFramework: (para) => (\r\n      <div>\r\n        <select name=\"gender\">\r\n          <option >India</option>\r\n          <option >Russia</option>\r\n          <option > Japan</option>\r\n        </select>\r\n      </div>\r\n    ),},\r\n\r\n\r\n\r\n\r\n    {\r\n      headerName: \"City\",\r\n      field: \"city\",\r\n      sortable: true,\r\n      editable: true,\r\n      cellStyle:cellStyles\r\n      \r\n    },\r\n\r\n    {\r\n      headerName: \"\",\r\n      field: \"\",\r\n      cellRendererFramework: (para) => (\r\n        <div>\r\n          \r\n          <i\r\n          className=\"far fa-trash-alt\"\r\n            onClick={() => {\r\n              let newRows = data.rows.filter(\r\n                (item) => item.id !== para.data.id\r\n              );\r\n              setData({ ...data, rows: newRows });\r\n              console.log(data);\r\n            }}\r\n          >\r\n            \r\n          </i>\r\n        </div>\r\n      ),\r\n    },\r\n  ];\r\n\r\n  const nonEditableColumns = [\r\n    {\r\n      headerName: \"Id\",\r\n      field: \"id\",\r\n      sortable: true,\r\n      editable: true,\r\n    },\r\n    { headerName: \"Name\", field: \"name\", sortable: true, },\r\n    { headerName: \"Email\", field: \"email\", sortable: true, },\r\n    {\r\n      headerName: \"Gender\",\r\n      field: \"gender\",\r\n    },\r\n\r\n    {\r\n      headerName: \"DOB\",\r\n      field: \"dob\",\r\n    },\r\n\r\n\r\n\r\n    { headerName: \"Country\", field: \"country\", sortable: true,},\r\n\r\n\r\n\r\n\r\n    {\r\n      headerName: \"City\",\r\n      field: \"city\",\r\n      sortable: true,\r\n    },\r\n\r\n    \r\n  ];\r\n\r\n  \r\n  let [data, setData] = useState({\r\n    rows: rows,\r\n  });\r\n\r\n  let [gridApi, setgridApi] = useState([]);\r\n\r\n  let [selectedRows, setSelectedRows] = useState([]);\r\n\r\n\r\n  let[staticData,setStaticData]=useState({columns:[],rows:[]})\r\n  // console.log(gridApi)\r\nlet[submit,setSubmit]=useState(false)\r\n  const [nonEditableRows,setNonEditableRows]=useState([])\r\n  \r\n  \r\n  \r\n\r\n  function cellStyles(params){\r\n    \r\n    if(params.value===\"\"&&submit===true){\r\n      return {background:\"red\"}\r\n    }\r\n  }\r\n\r\n  \r\n  function cellStylesYellow(params){\r\n    if(params.value===\"\" &&submit===true){\r\n      return {background:\"yellow\"}\r\n    }\r\n  }\r\n\r\n\r\n  const getLocalData=()=>{\r\n    if(localStorage.getItem('data')===null){\r\n      localStorage.setItem('data',JSON.stringify([]))\r\n    }else{\r\n     let localData=JSON.parse(localStorage.getItem('data'))\r\n     setStaticData(localData)\r\n    }\r\n    }\r\n    \r\n\r\n  return (\r\n    <div className=\"App\">\r\n      <Header\r\n        \r\n        setData={setData}\r\n        data={data}\r\n        addNewRow={addNewRow}\r\n        gridApi={gridApi}\r\n        selectedRows={selectedRows}\r\n        setSelectedRows={setSelectedRows}\r\n        nonEditableColumns={nonEditableColumns}\r\n        setStaticData={setStaticData}\r\n        staticData={staticData}\r\n        nonEditableRows={nonEditableRows}\r\n        setNonEditableRows={setNonEditableRows}\r\n        setSubmit={setSubmit}\r\n      />\r\n\r\n      <Table\r\n        setSelectedRows={setSelectedRows}\r\n        rows={data.rows}\r\n        columns={columns}\r\n        setgridApi={setgridApi}\r\n      />\r\n\r\n     <h1>Submitted Grid</h1>\r\n\r\n     <StaticTable\r\n      rows={staticData.rows}\r\n      columns={staticData.columns}\r\n     />\r\n\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default App;\r\n","const reportWebVitals = onPerfEntry => {\r\n  if (onPerfEntry && onPerfEntry instanceof Function) {\r\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\r\n      getCLS(onPerfEntry);\r\n      getFID(onPerfEntry);\r\n      getFCP(onPerfEntry);\r\n      getLCP(onPerfEntry);\r\n      getTTFB(onPerfEntry);\r\n    });\r\n  }\r\n};\r\n\r\nexport default reportWebVitals;\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport App from './App';\r\nimport reportWebVitals from './reportWebVitals';\r\n\r\nReactDOM.render(\r\n  <React.StrictMode>\r\n    <App />\r\n  </React.StrictMode>,\r\n  document.getElementById('root')\r\n);\r\n\r\n// If you want to start measuring performance in your app, pass a function\r\n// to log results (for example: reportWebVitals(console.log))\r\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\r\nreportWebVitals();\r\n"],"sourceRoot":""}